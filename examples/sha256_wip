/*
	This is a WIP example implementing sha256, from FIPS 180-2. The spec
	says all values as big-endian. This is left implicit in this example;
	how to denote this is TBD.
*/


type HashVal = [8]secret u<32>

type Block = [512/32]secret u<32>

type State = struct {
	hashval: HashVal,
}

// Section 3.2
fn rotr32(n: u<5>, x: u<32>) -> u<32> = (x >> n) | (x << (32 - n));
fn rotl32(n: u<5>, x: u<32>) -> u<32> = (x << n) | (x >> (32 - n));

// Section 4.1.2
fn ch(x, y, z: u<32>) -> u<32>  = (x & y) ^ (x & z);
fn maj(x, y, z: u<32>) -> u<32> = (x & y) ^ (x & z) ^ (y & z);
fn SIGMA0(x: u<32>) -> u<32> = rotr32(2, x) ^ rotr32(13, x) ^ rotr32(22, x);
fn SIGMA1(x: u<32>) -> u<32> = rotr32(6, x) ^ rotr32(11, x) ^ rotr32(25, x);
fn sigma0(x: u<32>) -> u<32> = rotr32(7, x) ^ rotr32(18, x) ^ (x >> 3);
fn sigma1(x: u<32>) -> u<32> = rotr32(17, x) ^ rotr32(19, x) ^ (x >> 10);

// Section 4.2.2
const K: [64]u<32> = [
	0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
]

// Section 5.3.2
const InitialHashVal : HashVal = [
	0x6a09e667,
	0xbb67ae86,
	0x3c6ef372,
	0xa54ff53a,
	0x510e527f,
	0x9b05688c,
	0x1f83d9ab,
	0x5be0cd19,
]


// Section 6.2.2
fn push_block(state: mut State, block: Block) = {
	W := block;
	for t := 16..63 {
		W[t] = sigma1(W[t-2]) + W[t-7] + sigma0(W[t-15]) + W[t-16];
	}

	a := state.hashval[0];
	b := state.hashval[1];
	c := state.hashval[2];
	d := state.hashval[3];
	e := state.hashval[4];
	f := state.hashval[5];
	g := state.hashval[6];
	h := state.hashval[7];

	for t := 0..63 {
		T1 := h + SIGMA1(e) + ch(e, f, g) + K[t] + W[t];
		T2 := SIGMA0(a) + maj(a, b, c);
		h = g;
		g = f;
		f = e;
		e = d + T1;
		d = c;
		c = b;
		b = a;
		a = T1 + T2;
	}

	state.hashval[0] += a;
	state.hashval[1] += b;
	state.hashval[2] += c;
	state.hashval[3] += d;
	state.hashval[4] += e;
	state.hashval[5] += f;
	state.hashval[6] += g;
	state.hashval[7] += h;
}
